// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	client "github.com/TheNatureOfSoftware/k3pi/pkg/client"
	mock "github.com/stretchr/testify/mock"
)

// Script is an autogenerated mock type for the Script type
type Script struct {
	mock.Mock
}

// Cmd provides a mock function with given fields: cmd
func (_m *Script) Cmd(cmd string) client.Script {
	ret := _m.Called(cmd)

	var r0 client.Script
	if rf, ok := ret.Get(0).(func(string) client.Script); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Script)
		}
	}

	return r0
}

// Cmdf provides a mock function with given fields: cmd, a
func (_m *Script) Cmdf(cmd string, a ...interface{}) client.Script {
	var _ca []interface{}
	_ca = append(_ca, cmd)
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	var r0 client.Script
	if rf, ok := ret.Get(0).(func(string, ...interface{}) client.Script); ok {
		r0 = rf(cmd, a...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Script)
		}
	}

	return r0
}

// Output provides a mock function with given fields:
func (_m *Script) Output() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields:
func (_m *Script) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
